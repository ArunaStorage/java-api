// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aruna/api/storage/services/v2/object_service.proto

// Protobuf Java Version: 3.25.1
package com.aruna.api.storage.services.v2;

/**
 * Protobuf type {@code aruna.api.storage.services.v2.FinishObjectStagingRequest}
 */
public final class FinishObjectStagingRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aruna.api.storage.services.v2.FinishObjectStagingRequest)
    FinishObjectStagingRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FinishObjectStagingRequest.newBuilder() to construct.
  private FinishObjectStagingRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FinishObjectStagingRequest() {
    objectId_ = "";
    hashes_ = java.util.Collections.emptyList();
    completedParts_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FinishObjectStagingRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aruna.api.storage.services.v2.ObjectServiceProto.internal_static_aruna_api_storage_services_v2_FinishObjectStagingRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aruna.api.storage.services.v2.ObjectServiceProto.internal_static_aruna_api_storage_services_v2_FinishObjectStagingRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aruna.api.storage.services.v2.FinishObjectStagingRequest.class, com.aruna.api.storage.services.v2.FinishObjectStagingRequest.Builder.class);
  }

  public static final int OBJECT_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object objectId_ = "";
  /**
   * <pre>
   * ObjectId
   * </pre>
   *
   * <code>string object_id = 1 [json_name = "objectId"];</code>
   * @return The objectId.
   */
  @java.lang.Override
  public java.lang.String getObjectId() {
    java.lang.Object ref = objectId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      objectId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * ObjectId
   * </pre>
   *
   * <code>string object_id = 1 [json_name = "objectId"];</code>
   * @return The bytes for objectId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getObjectIdBytes() {
    java.lang.Object ref = objectId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      objectId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTENT_LEN_FIELD_NUMBER = 2;
  private long contentLen_ = 0L;
  /**
   * <pre>
   * Final content len 
   * </pre>
   *
   * <code>int64 content_len = 2 [json_name = "contentLen"];</code>
   * @return The contentLen.
   */
  @java.lang.Override
  public long getContentLen() {
    return contentLen_;
  }

  public static final int HASHES_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.aruna.api.storage.models.v2.Hash> hashes_;
  /**
   * <pre>
   * Hash of the uploaded data - used to verify the data integrity.
   * This supports multiple hashing algorithms.
   * </pre>
   *
   * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aruna.api.storage.models.v2.Hash> getHashesList() {
    return hashes_;
  }
  /**
   * <pre>
   * Hash of the uploaded data - used to verify the data integrity.
   * This supports multiple hashing algorithms.
   * </pre>
   *
   * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aruna.api.storage.models.v2.HashOrBuilder> 
      getHashesOrBuilderList() {
    return hashes_;
  }
  /**
   * <pre>
   * Hash of the uploaded data - used to verify the data integrity.
   * This supports multiple hashing algorithms.
   * </pre>
   *
   * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
   */
  @java.lang.Override
  public int getHashesCount() {
    return hashes_.size();
  }
  /**
   * <pre>
   * Hash of the uploaded data - used to verify the data integrity.
   * This supports multiple hashing algorithms.
   * </pre>
   *
   * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
   */
  @java.lang.Override
  public com.aruna.api.storage.models.v2.Hash getHashes(int index) {
    return hashes_.get(index);
  }
  /**
   * <pre>
   * Hash of the uploaded data - used to verify the data integrity.
   * This supports multiple hashing algorithms.
   * </pre>
   *
   * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
   */
  @java.lang.Override
  public com.aruna.api.storage.models.v2.HashOrBuilder getHashesOrBuilder(
      int index) {
    return hashes_.get(index);
  }

  public static final int COMPLETED_PARTS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.aruna.api.storage.services.v2.CompletedPart> completedParts_;
  /**
   * <pre>
   * If the upload was multipart, this is the list of parts that were uploaded.
   * Should be empty if the upload was not multipart.
   * (optional)
   * </pre>
   *
   * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aruna.api.storage.services.v2.CompletedPart> getCompletedPartsList() {
    return completedParts_;
  }
  /**
   * <pre>
   * If the upload was multipart, this is the list of parts that were uploaded.
   * Should be empty if the upload was not multipart.
   * (optional)
   * </pre>
   *
   * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aruna.api.storage.services.v2.CompletedPartOrBuilder> 
      getCompletedPartsOrBuilderList() {
    return completedParts_;
  }
  /**
   * <pre>
   * If the upload was multipart, this is the list of parts that were uploaded.
   * Should be empty if the upload was not multipart.
   * (optional)
   * </pre>
   *
   * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
   */
  @java.lang.Override
  public int getCompletedPartsCount() {
    return completedParts_.size();
  }
  /**
   * <pre>
   * If the upload was multipart, this is the list of parts that were uploaded.
   * Should be empty if the upload was not multipart.
   * (optional)
   * </pre>
   *
   * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
   */
  @java.lang.Override
  public com.aruna.api.storage.services.v2.CompletedPart getCompletedParts(int index) {
    return completedParts_.get(index);
  }
  /**
   * <pre>
   * If the upload was multipart, this is the list of parts that were uploaded.
   * Should be empty if the upload was not multipart.
   * (optional)
   * </pre>
   *
   * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
   */
  @java.lang.Override
  public com.aruna.api.storage.services.v2.CompletedPartOrBuilder getCompletedPartsOrBuilder(
      int index) {
    return completedParts_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectId_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, objectId_);
    }
    if (contentLen_ != 0L) {
      output.writeInt64(2, contentLen_);
    }
    for (int i = 0; i < hashes_.size(); i++) {
      output.writeMessage(3, hashes_.get(i));
    }
    for (int i = 0; i < completedParts_.size(); i++) {
      output.writeMessage(4, completedParts_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(objectId_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, objectId_);
    }
    if (contentLen_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, contentLen_);
    }
    for (int i = 0; i < hashes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, hashes_.get(i));
    }
    for (int i = 0; i < completedParts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, completedParts_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aruna.api.storage.services.v2.FinishObjectStagingRequest)) {
      return super.equals(obj);
    }
    com.aruna.api.storage.services.v2.FinishObjectStagingRequest other = (com.aruna.api.storage.services.v2.FinishObjectStagingRequest) obj;

    if (!getObjectId()
        .equals(other.getObjectId())) return false;
    if (getContentLen()
        != other.getContentLen()) return false;
    if (!getHashesList()
        .equals(other.getHashesList())) return false;
    if (!getCompletedPartsList()
        .equals(other.getCompletedPartsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + OBJECT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getObjectId().hashCode();
    hash = (37 * hash) + CONTENT_LEN_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getContentLen());
    if (getHashesCount() > 0) {
      hash = (37 * hash) + HASHES_FIELD_NUMBER;
      hash = (53 * hash) + getHashesList().hashCode();
    }
    if (getCompletedPartsCount() > 0) {
      hash = (37 * hash) + COMPLETED_PARTS_FIELD_NUMBER;
      hash = (53 * hash) + getCompletedPartsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aruna.api.storage.services.v2.FinishObjectStagingRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aruna.api.storage.services.v2.FinishObjectStagingRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aruna.api.storage.services.v2.FinishObjectStagingRequest)
      com.aruna.api.storage.services.v2.FinishObjectStagingRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aruna.api.storage.services.v2.ObjectServiceProto.internal_static_aruna_api_storage_services_v2_FinishObjectStagingRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aruna.api.storage.services.v2.ObjectServiceProto.internal_static_aruna_api_storage_services_v2_FinishObjectStagingRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aruna.api.storage.services.v2.FinishObjectStagingRequest.class, com.aruna.api.storage.services.v2.FinishObjectStagingRequest.Builder.class);
    }

    // Construct using com.aruna.api.storage.services.v2.FinishObjectStagingRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      objectId_ = "";
      contentLen_ = 0L;
      if (hashesBuilder_ == null) {
        hashes_ = java.util.Collections.emptyList();
      } else {
        hashes_ = null;
        hashesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (completedPartsBuilder_ == null) {
        completedParts_ = java.util.Collections.emptyList();
      } else {
        completedParts_ = null;
        completedPartsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aruna.api.storage.services.v2.ObjectServiceProto.internal_static_aruna_api_storage_services_v2_FinishObjectStagingRequest_descriptor;
    }

    @java.lang.Override
    public com.aruna.api.storage.services.v2.FinishObjectStagingRequest getDefaultInstanceForType() {
      return com.aruna.api.storage.services.v2.FinishObjectStagingRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.aruna.api.storage.services.v2.FinishObjectStagingRequest build() {
      com.aruna.api.storage.services.v2.FinishObjectStagingRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aruna.api.storage.services.v2.FinishObjectStagingRequest buildPartial() {
      com.aruna.api.storage.services.v2.FinishObjectStagingRequest result = new com.aruna.api.storage.services.v2.FinishObjectStagingRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.aruna.api.storage.services.v2.FinishObjectStagingRequest result) {
      if (hashesBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          hashes_ = java.util.Collections.unmodifiableList(hashes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.hashes_ = hashes_;
      } else {
        result.hashes_ = hashesBuilder_.build();
      }
      if (completedPartsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          completedParts_ = java.util.Collections.unmodifiableList(completedParts_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.completedParts_ = completedParts_;
      } else {
        result.completedParts_ = completedPartsBuilder_.build();
      }
    }

    private void buildPartial0(com.aruna.api.storage.services.v2.FinishObjectStagingRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.objectId_ = objectId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.contentLen_ = contentLen_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aruna.api.storage.services.v2.FinishObjectStagingRequest) {
        return mergeFrom((com.aruna.api.storage.services.v2.FinishObjectStagingRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aruna.api.storage.services.v2.FinishObjectStagingRequest other) {
      if (other == com.aruna.api.storage.services.v2.FinishObjectStagingRequest.getDefaultInstance()) return this;
      if (!other.getObjectId().isEmpty()) {
        objectId_ = other.objectId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getContentLen() != 0L) {
        setContentLen(other.getContentLen());
      }
      if (hashesBuilder_ == null) {
        if (!other.hashes_.isEmpty()) {
          if (hashes_.isEmpty()) {
            hashes_ = other.hashes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureHashesIsMutable();
            hashes_.addAll(other.hashes_);
          }
          onChanged();
        }
      } else {
        if (!other.hashes_.isEmpty()) {
          if (hashesBuilder_.isEmpty()) {
            hashesBuilder_.dispose();
            hashesBuilder_ = null;
            hashes_ = other.hashes_;
            bitField0_ = (bitField0_ & ~0x00000004);
            hashesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHashesFieldBuilder() : null;
          } else {
            hashesBuilder_.addAllMessages(other.hashes_);
          }
        }
      }
      if (completedPartsBuilder_ == null) {
        if (!other.completedParts_.isEmpty()) {
          if (completedParts_.isEmpty()) {
            completedParts_ = other.completedParts_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCompletedPartsIsMutable();
            completedParts_.addAll(other.completedParts_);
          }
          onChanged();
        }
      } else {
        if (!other.completedParts_.isEmpty()) {
          if (completedPartsBuilder_.isEmpty()) {
            completedPartsBuilder_.dispose();
            completedPartsBuilder_ = null;
            completedParts_ = other.completedParts_;
            bitField0_ = (bitField0_ & ~0x00000008);
            completedPartsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCompletedPartsFieldBuilder() : null;
          } else {
            completedPartsBuilder_.addAllMessages(other.completedParts_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              objectId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              contentLen_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              com.aruna.api.storage.models.v2.Hash m =
                  input.readMessage(
                      com.aruna.api.storage.models.v2.Hash.parser(),
                      extensionRegistry);
              if (hashesBuilder_ == null) {
                ensureHashesIsMutable();
                hashes_.add(m);
              } else {
                hashesBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              com.aruna.api.storage.services.v2.CompletedPart m =
                  input.readMessage(
                      com.aruna.api.storage.services.v2.CompletedPart.parser(),
                      extensionRegistry);
              if (completedPartsBuilder_ == null) {
                ensureCompletedPartsIsMutable();
                completedParts_.add(m);
              } else {
                completedPartsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object objectId_ = "";
    /**
     * <pre>
     * ObjectId
     * </pre>
     *
     * <code>string object_id = 1 [json_name = "objectId"];</code>
     * @return The objectId.
     */
    public java.lang.String getObjectId() {
      java.lang.Object ref = objectId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        objectId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * ObjectId
     * </pre>
     *
     * <code>string object_id = 1 [json_name = "objectId"];</code>
     * @return The bytes for objectId.
     */
    public com.google.protobuf.ByteString
        getObjectIdBytes() {
      java.lang.Object ref = objectId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        objectId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * ObjectId
     * </pre>
     *
     * <code>string object_id = 1 [json_name = "objectId"];</code>
     * @param value The objectId to set.
     * @return This builder for chaining.
     */
    public Builder setObjectId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      objectId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ObjectId
     * </pre>
     *
     * <code>string object_id = 1 [json_name = "objectId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearObjectId() {
      objectId_ = getDefaultInstance().getObjectId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ObjectId
     * </pre>
     *
     * <code>string object_id = 1 [json_name = "objectId"];</code>
     * @param value The bytes for objectId to set.
     * @return This builder for chaining.
     */
    public Builder setObjectIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      objectId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private long contentLen_ ;
    /**
     * <pre>
     * Final content len 
     * </pre>
     *
     * <code>int64 content_len = 2 [json_name = "contentLen"];</code>
     * @return The contentLen.
     */
    @java.lang.Override
    public long getContentLen() {
      return contentLen_;
    }
    /**
     * <pre>
     * Final content len 
     * </pre>
     *
     * <code>int64 content_len = 2 [json_name = "contentLen"];</code>
     * @param value The contentLen to set.
     * @return This builder for chaining.
     */
    public Builder setContentLen(long value) {

      contentLen_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Final content len 
     * </pre>
     *
     * <code>int64 content_len = 2 [json_name = "contentLen"];</code>
     * @return This builder for chaining.
     */
    public Builder clearContentLen() {
      bitField0_ = (bitField0_ & ~0x00000002);
      contentLen_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<com.aruna.api.storage.models.v2.Hash> hashes_ =
      java.util.Collections.emptyList();
    private void ensureHashesIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        hashes_ = new java.util.ArrayList<com.aruna.api.storage.models.v2.Hash>(hashes_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aruna.api.storage.models.v2.Hash, com.aruna.api.storage.models.v2.Hash.Builder, com.aruna.api.storage.models.v2.HashOrBuilder> hashesBuilder_;

    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public java.util.List<com.aruna.api.storage.models.v2.Hash> getHashesList() {
      if (hashesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(hashes_);
      } else {
        return hashesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public int getHashesCount() {
      if (hashesBuilder_ == null) {
        return hashes_.size();
      } else {
        return hashesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public com.aruna.api.storage.models.v2.Hash getHashes(int index) {
      if (hashesBuilder_ == null) {
        return hashes_.get(index);
      } else {
        return hashesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder setHashes(
        int index, com.aruna.api.storage.models.v2.Hash value) {
      if (hashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashesIsMutable();
        hashes_.set(index, value);
        onChanged();
      } else {
        hashesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder setHashes(
        int index, com.aruna.api.storage.models.v2.Hash.Builder builderForValue) {
      if (hashesBuilder_ == null) {
        ensureHashesIsMutable();
        hashes_.set(index, builderForValue.build());
        onChanged();
      } else {
        hashesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder addHashes(com.aruna.api.storage.models.v2.Hash value) {
      if (hashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashesIsMutable();
        hashes_.add(value);
        onChanged();
      } else {
        hashesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder addHashes(
        int index, com.aruna.api.storage.models.v2.Hash value) {
      if (hashesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHashesIsMutable();
        hashes_.add(index, value);
        onChanged();
      } else {
        hashesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder addHashes(
        com.aruna.api.storage.models.v2.Hash.Builder builderForValue) {
      if (hashesBuilder_ == null) {
        ensureHashesIsMutable();
        hashes_.add(builderForValue.build());
        onChanged();
      } else {
        hashesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder addHashes(
        int index, com.aruna.api.storage.models.v2.Hash.Builder builderForValue) {
      if (hashesBuilder_ == null) {
        ensureHashesIsMutable();
        hashes_.add(index, builderForValue.build());
        onChanged();
      } else {
        hashesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder addAllHashes(
        java.lang.Iterable<? extends com.aruna.api.storage.models.v2.Hash> values) {
      if (hashesBuilder_ == null) {
        ensureHashesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hashes_);
        onChanged();
      } else {
        hashesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder clearHashes() {
      if (hashesBuilder_ == null) {
        hashes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        hashesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public Builder removeHashes(int index) {
      if (hashesBuilder_ == null) {
        ensureHashesIsMutable();
        hashes_.remove(index);
        onChanged();
      } else {
        hashesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public com.aruna.api.storage.models.v2.Hash.Builder getHashesBuilder(
        int index) {
      return getHashesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public com.aruna.api.storage.models.v2.HashOrBuilder getHashesOrBuilder(
        int index) {
      if (hashesBuilder_ == null) {
        return hashes_.get(index);  } else {
        return hashesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public java.util.List<? extends com.aruna.api.storage.models.v2.HashOrBuilder> 
         getHashesOrBuilderList() {
      if (hashesBuilder_ != null) {
        return hashesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(hashes_);
      }
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public com.aruna.api.storage.models.v2.Hash.Builder addHashesBuilder() {
      return getHashesFieldBuilder().addBuilder(
          com.aruna.api.storage.models.v2.Hash.getDefaultInstance());
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public com.aruna.api.storage.models.v2.Hash.Builder addHashesBuilder(
        int index) {
      return getHashesFieldBuilder().addBuilder(
          index, com.aruna.api.storage.models.v2.Hash.getDefaultInstance());
    }
    /**
     * <pre>
     * Hash of the uploaded data - used to verify the data integrity.
     * This supports multiple hashing algorithms.
     * </pre>
     *
     * <code>repeated .aruna.api.storage.models.v2.Hash hashes = 3 [json_name = "hashes"];</code>
     */
    public java.util.List<com.aruna.api.storage.models.v2.Hash.Builder> 
         getHashesBuilderList() {
      return getHashesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aruna.api.storage.models.v2.Hash, com.aruna.api.storage.models.v2.Hash.Builder, com.aruna.api.storage.models.v2.HashOrBuilder> 
        getHashesFieldBuilder() {
      if (hashesBuilder_ == null) {
        hashesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aruna.api.storage.models.v2.Hash, com.aruna.api.storage.models.v2.Hash.Builder, com.aruna.api.storage.models.v2.HashOrBuilder>(
                hashes_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        hashes_ = null;
      }
      return hashesBuilder_;
    }

    private java.util.List<com.aruna.api.storage.services.v2.CompletedPart> completedParts_ =
      java.util.Collections.emptyList();
    private void ensureCompletedPartsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        completedParts_ = new java.util.ArrayList<com.aruna.api.storage.services.v2.CompletedPart>(completedParts_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aruna.api.storage.services.v2.CompletedPart, com.aruna.api.storage.services.v2.CompletedPart.Builder, com.aruna.api.storage.services.v2.CompletedPartOrBuilder> completedPartsBuilder_;

    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public java.util.List<com.aruna.api.storage.services.v2.CompletedPart> getCompletedPartsList() {
      if (completedPartsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(completedParts_);
      } else {
        return completedPartsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public int getCompletedPartsCount() {
      if (completedPartsBuilder_ == null) {
        return completedParts_.size();
      } else {
        return completedPartsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public com.aruna.api.storage.services.v2.CompletedPart getCompletedParts(int index) {
      if (completedPartsBuilder_ == null) {
        return completedParts_.get(index);
      } else {
        return completedPartsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder setCompletedParts(
        int index, com.aruna.api.storage.services.v2.CompletedPart value) {
      if (completedPartsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompletedPartsIsMutable();
        completedParts_.set(index, value);
        onChanged();
      } else {
        completedPartsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder setCompletedParts(
        int index, com.aruna.api.storage.services.v2.CompletedPart.Builder builderForValue) {
      if (completedPartsBuilder_ == null) {
        ensureCompletedPartsIsMutable();
        completedParts_.set(index, builderForValue.build());
        onChanged();
      } else {
        completedPartsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder addCompletedParts(com.aruna.api.storage.services.v2.CompletedPart value) {
      if (completedPartsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompletedPartsIsMutable();
        completedParts_.add(value);
        onChanged();
      } else {
        completedPartsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder addCompletedParts(
        int index, com.aruna.api.storage.services.v2.CompletedPart value) {
      if (completedPartsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompletedPartsIsMutable();
        completedParts_.add(index, value);
        onChanged();
      } else {
        completedPartsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder addCompletedParts(
        com.aruna.api.storage.services.v2.CompletedPart.Builder builderForValue) {
      if (completedPartsBuilder_ == null) {
        ensureCompletedPartsIsMutable();
        completedParts_.add(builderForValue.build());
        onChanged();
      } else {
        completedPartsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder addCompletedParts(
        int index, com.aruna.api.storage.services.v2.CompletedPart.Builder builderForValue) {
      if (completedPartsBuilder_ == null) {
        ensureCompletedPartsIsMutable();
        completedParts_.add(index, builderForValue.build());
        onChanged();
      } else {
        completedPartsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder addAllCompletedParts(
        java.lang.Iterable<? extends com.aruna.api.storage.services.v2.CompletedPart> values) {
      if (completedPartsBuilder_ == null) {
        ensureCompletedPartsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, completedParts_);
        onChanged();
      } else {
        completedPartsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder clearCompletedParts() {
      if (completedPartsBuilder_ == null) {
        completedParts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        completedPartsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public Builder removeCompletedParts(int index) {
      if (completedPartsBuilder_ == null) {
        ensureCompletedPartsIsMutable();
        completedParts_.remove(index);
        onChanged();
      } else {
        completedPartsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public com.aruna.api.storage.services.v2.CompletedPart.Builder getCompletedPartsBuilder(
        int index) {
      return getCompletedPartsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public com.aruna.api.storage.services.v2.CompletedPartOrBuilder getCompletedPartsOrBuilder(
        int index) {
      if (completedPartsBuilder_ == null) {
        return completedParts_.get(index);  } else {
        return completedPartsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public java.util.List<? extends com.aruna.api.storage.services.v2.CompletedPartOrBuilder> 
         getCompletedPartsOrBuilderList() {
      if (completedPartsBuilder_ != null) {
        return completedPartsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(completedParts_);
      }
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public com.aruna.api.storage.services.v2.CompletedPart.Builder addCompletedPartsBuilder() {
      return getCompletedPartsFieldBuilder().addBuilder(
          com.aruna.api.storage.services.v2.CompletedPart.getDefaultInstance());
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public com.aruna.api.storage.services.v2.CompletedPart.Builder addCompletedPartsBuilder(
        int index) {
      return getCompletedPartsFieldBuilder().addBuilder(
          index, com.aruna.api.storage.services.v2.CompletedPart.getDefaultInstance());
    }
    /**
     * <pre>
     * If the upload was multipart, this is the list of parts that were uploaded.
     * Should be empty if the upload was not multipart.
     * (optional)
     * </pre>
     *
     * <code>repeated .aruna.api.storage.services.v2.CompletedPart completed_parts = 4 [json_name = "completedParts"];</code>
     */
    public java.util.List<com.aruna.api.storage.services.v2.CompletedPart.Builder> 
         getCompletedPartsBuilderList() {
      return getCompletedPartsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aruna.api.storage.services.v2.CompletedPart, com.aruna.api.storage.services.v2.CompletedPart.Builder, com.aruna.api.storage.services.v2.CompletedPartOrBuilder> 
        getCompletedPartsFieldBuilder() {
      if (completedPartsBuilder_ == null) {
        completedPartsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aruna.api.storage.services.v2.CompletedPart, com.aruna.api.storage.services.v2.CompletedPart.Builder, com.aruna.api.storage.services.v2.CompletedPartOrBuilder>(
                completedParts_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        completedParts_ = null;
      }
      return completedPartsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aruna.api.storage.services.v2.FinishObjectStagingRequest)
  }

  // @@protoc_insertion_point(class_scope:aruna.api.storage.services.v2.FinishObjectStagingRequest)
  private static final com.aruna.api.storage.services.v2.FinishObjectStagingRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aruna.api.storage.services.v2.FinishObjectStagingRequest();
  }

  public static com.aruna.api.storage.services.v2.FinishObjectStagingRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FinishObjectStagingRequest>
      PARSER = new com.google.protobuf.AbstractParser<FinishObjectStagingRequest>() {
    @java.lang.Override
    public FinishObjectStagingRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FinishObjectStagingRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FinishObjectStagingRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aruna.api.storage.services.v2.FinishObjectStagingRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

